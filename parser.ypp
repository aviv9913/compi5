%{
#include <iostream>
#include <stdlib.h>
#include "library.h"
#include "hw3_output.hpp"
using namespace std;
extern int yylex();
int yyerror(const char * message);

%}

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc CASE;
%nonassoc DEFAULT;
%nonassoc COLON;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOPL;
%nonassoc RELOPN;
%left ADD;
%left MUL;
%left RPAREN;
%right IF;
%right ELSE;
%right SWITCH;
%left LPAREN;
%right NOT;
%nonassoc EPSILON;
%nonassoc AUX;

%%

Program:
    {$$= new Program();} Funcs {endProgram();};

Funcs:
    %prec EPSILON{$$= new Funcs();}
    | FuncDecl Funcs %prec AUX{$$= new Funcs();};

FuncDecl:
    RetType ID LPAREN Formals RPAREN {$$= new FuncDecl(dynamic_cast<RetType*>($1), $2,
    dynamic_cast<Formals*>($4));} LBRACE OSM {enterArgsToStackTable(dynamic_cast<Formals*>($4));} Statements
    CSM {endCurrentFunc(dynamic_cast<RetType*>($1));} RBRACE {$$ = $6;};

RetType:
    Type{$$= new RetType(dynamic_cast<Type*>($1));}
    | VOID{$$= new RetType($1);};

Formals:
    {$$= new Formals();}
    | FormalsList{$$= new Formals(dynamic_cast<FormalsList*>($1));};

FormalsList:
    FormalDecl{$$= new FormalsList(dynamic_cast<FormalDecl*>($1));}
    | FormalDecl COMMA FormalsList{$$= new FormalsList(dynamic_cast<FormalDecl*>($1), dynamic_cast<FormalsList*>($3));};

FormalDecl:
    Type ID{$$= new FormalDecl(dynamic_cast<Type*>($1), $2);};

Statements:
    Statement{$$= new Statements(dynamic_cast<Statement*>($1));}
    | Statements Statement{$$= new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2));};

Statement:
    LBRACE OSM Statements CSM RBRACE{$$= new Statements(dynamic_cast<Statement*>($3));}
    | Type ID SC{$$= new Statement(dynamic_cast<Type*>($1), $2);}
    | Type ID ASSIGN Exp SC {$$= new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Exp*>($4));}
    | ID ASSIGN Exp SC {$$= new Statement($1, dynamic_cast<Exp*>($3));}
    | Call SC {$$= new Statement(dynamic_cast<Call*>($1));}
    | RETURN SC {$$= new Statement(dynamic_cast<RetType*>($1));}
    | RETURN Exp SC {$$= new Statement(dynamic_cast<Exp*>($2));}
    | IF LPAREN BoolCheck RPAREN OSM M Statement{
        $$= new Statement("if", dynamic_cast<Exp*>($3), dynamic_cast<Statement*> ($7));
        closeScope();
        ifBp(dynamic_cast<M*> ($6), dynamic_cast<Exp*> ($3));
        }
    | IF LPAREN BoolCheck RPAREN OSM M Statement ELSE {
        $$= new Statement("if else", dynamic_cast<Exp*> ($3), dynamic_cast<Statement*>($7));
        closeScope();
      }
      OSM N Statement CSM{
          ifElseBp(dynamic_cast<M*> ($6), dynamic_cast<N*> ($11), dynamic_cast<Exp*> ($3));
          $$ = addElseStatement(dynamic_cast<Statement*>($9), dynamic_cast<Statement*>($12));
      }
    | WHILE LPAREN N Exp RPAREN {$$= castExpToP(dynamic_cast<Exp*> ($4));}
     {$$= new Statement("while", dynamic_cast<Exp*>($3)); incLoop();} OSM Statement CSM
    {decLoop(dynamic_cast<N*> ($3),dynamic_cast<P*> ($6),dynamic_cast<Statement*> ($9)); $$ = $7;} //Original "<Statement*> ($9)), $$ = $7;"
    | BREAK SC{$$= new Statement($1);}
    | CONTINUE SC{$$= new Statement($1);}
    | SWITCH LPAREN IntCheck RPAREN LBRACE OSM CaseList CSM RBRACE{$$= new Statement(dynamic_cast<Exp*>($3),
    dynamic_cast<Exp*>($7));};

Call:
    ID LPAREN ExpList RPAREN{$$= new Call($1, dynamic_cast<ExpList*>($3));}
    | ID LPAREN RPAREN{$$= new Call($1);};

ExpList:
    Exp{$$= new ExpList(dynamic_cast<Exp*>($1));}
    | Exp COMMA ExpList{$$= new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3));};

Type:
    INT{$$= new Type($1);}
    | BYTE{$$= new Type($1);}
    | BOOL{$$= new Type($1);};

Exp:
    LPAREN Exp RPAREN{$$= new Exp(dynamic_cast<Exp*> ($2));}
    | Exp ADD Exp{$$= new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), "ADD");}
    | Exp MUL Exp{$$= new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), "MUL");}
    | ID{$$= new Exp($1);}
    | Call{$$= new Exp(dynamic_cast<Call*>($1));}
    | NUM{$$= new Exp($1, "NUM");}
    | NUM B{$$= new Exp($1, "B");}
    | STRING{$$= new Exp($1, "STRING");}
    | TRUE{$$= new Exp($1, "TRUE");}
    | FALSE{$$= new Exp($1, "FALSE");}
    | NOT Exp{$$= new Exp($1, dynamic_cast<Exp*>($2));}
    | Exp AND {$$= castExpToP(dynamic_cast<Exp*> ($1));} Exp {$$= new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*> ($4), "AND", dynamic_cast<P*> ($3));}
    | Exp OR {$$= castExpToP(dynamic_cast<Exp*> ($1));} Exp {$$= new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*> ($4), "OR", dynamic_cast<P*> ($3));}
    | Exp RELOPN Exp{$$= new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), "RELOPN");}
    | Exp RELOPL Exp{$$= new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3), "RELOPL");};

CaseList:
    CaseDecl CaseList{$$= new CaseList(dynamic_cast<CaseDecl*>($1), dynamic_cast<CaseList*>($2));}
    | CaseDecl{$$= new CaseList(dynamic_cast<CaseDecl*>($1));}
    | DEFAULT COLON Statements{$$= new CaseList(dynamic_cast<Statements*>($3));};

CaseDecl:
    CASE NUM COLON Statements{$$= new CaseDecl($2, dynamic_cast<Statements*>($4));};


BoolCheck:  Exp{$$= new Exp(dynamic_cast<Exp*>($1), "STRING");};
IntCheck:   Exp{$$= new Exp(dynamic_cast<Exp*>($1), 0);};
OSM:						 		{openScope();};
CSM:								{closeScope();};
M:                              {$$ = new M();};
N:                              {$$ = new N();};
%%

%%


int main()
{
	return yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}